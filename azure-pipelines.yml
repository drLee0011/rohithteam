name: Terraform CI/CD Pipeline

trigger:
  branches:
    include:
      - main  # Trigger on pushes to the main branch

stages:
  - stage: Terraform
    jobs:
      - job: Terraform
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          # Checkout code from the repository
          - checkout: self

          # Install Terraform manually
          - task: Bash@3
            displayName: 'Install Terraform'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update -y
                sudo apt-get install -y wget unzip
                wget https://releases.hashicorp.com/terraform/1.4.0/terraform_1.4.0_linux_amd64.zip
                unzip terraform_1.4.0_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform -version  # Verify the installation

          # Configure AWS credentials and initialize/apply Terraform
          - task: Bash@3
            displayName: 'Initialize and apply Terraform'
            inputs:
              targetType: 'inline'
              script: |
                export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
                export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
                export AWS_DEFAULT_REGION=eu-north-1
                
                terraform init
                terraform apply -auto-approve

          # Capture Terraform output (EC2 public IP) to use in Ansible
          - task: Bash@3
            displayName: 'Get EC2 Public IP from Terraform Output'
            inputs:
              targetType: 'inline'
              script: |
                EC2_PUBLIC_IP=$(terraform output -raw instance_public_ip)
                echo "##vso[task.setvariable variable=EC2_PUBLIC_IP]$EC2_PUBLIC_IP"

          # Install Ansible
          - task: Bash@3
            displayName: 'Install Ansible'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt update
                sudo apt install -y ansible

          # Run the Ansible playbook to install Docker and start the container
          - task: Bash@3
            displayName: 'Run Ansible Playbook'
            inputs:
              targetType: 'inline'
              script: |
                echo "[aws]" > hosts.ini
                echo "$(EC2_PUBLIC_IP)" >> hosts.ini  # Use EC2 public IP
                echo "[aws:vars]" >> hosts.ini
                echo "ansible_user=ec2-user" >> hosts.ini  # Or 'ubuntu' depending on the AMI
                echo "ansible_ssh_private_key_file=/path/to/your/ssh/key.pem" >> hosts.ini
                
                ansible-playbook -i hosts.ini setup-docker.yml

          # Wait for 6 minutes before destroying the infrastructure
          - task: Bash@3
            displayName: 'Wait for 6 minutes'
            inputs:
              targetType: 'inline'
              script: |
                echo "Waiting for 6 minutes before destroying the infrastructure..."
                sleep 360

          # Destroy infrastructure
          - task: Bash@3
            displayName: 'Destroy Infrastructure'
            inputs:
              targetType: 'inline'
              script: |
                echo "Destroying infrastructure..."
                terraform destroy -auto-approve
